#!/usr/bin/env python3
import rclpy
from rcl_interfaces.msg import (ParameterDescriptor, ParameterType)
from rclpy.node import Node
import rclpy.time
from nav_msgs.msg import Odometry
from acoustic_simulator.msg import ModemOut
from acoustic_simulator.datawriter_class import datawriter
from acoustic_simulator.acoustic_sim_class import acousticSimulation
from acoustic_simulator.localisation_sim_class import localisationSimulation
from acoustic_simulator.dataloader_class import dataLoader

import numpy as np
import yaml
import threading

class TesterNode(Node):

    def __init__(self, node_name):
        super().__init__(node_name=node_name)

        self.t0 = 0.0
        self.dt = 0.0
        self.t = self.t0
        self.z = None
        self.x0 = self.filter_config["config"][1]["settings"]["InitState"]


        self.lock = threading.RLock()
        self.position = [0.0, 0.0, 0.0]
        self.velocity = [0.0, 0.0, 0.0]

        self.rate_accoustics = 1000  # Hz
        
        self.acoustic_sim = acousticSimulation()

        self.modem_pub = self.create_publisher(ModemOut,  # all messages in same topic?
                                               'modems',
                                               qos_profile=1)

        self.odometry_sub = self.create_subscription(Odometry,
                                                     'odometry',
                                                     self.on_odometry,
                                                     qos_profile=1)

        self.acoustics_timer = self.create_timer(timer_period_sec=(1 / self.rate_accoustics),
                                               callback=self.simulate_acoustics)

    def simulate_acoustics(self):
        t = self.get_clock().now()

        # TODO: t should be a Time and not a duration according to Nils? This is a ROS Duration object though!

        with self.lock:
            measurement = self.acoustic_sim.simulate(self.position, t)  # moving buoys?
            # self.publish_velocity(t, self.send_velocity)  # what's this for?

    def on_odometry(self, msg: Odometry):
        p = msg.pose.pose.position
        v = msg.twist.twist.linear
        with self.lock:
            self.position = [p.x, p.y, p.z]
            self.velocity = [v.x, v.y, v.z]


    def send_measurement(self, t: float, id: int, dist: float):
        msg = ModemOut()
        msg.timestamp = self.get_clock().now().to_msg(t)  # TODO: Should be time of ??
        msg.dist = dist
        msg.id = id
        
        self.modem_pub.publish(msg)

    def send_velocity(t, self):
        # Nils Implementierung: 
        msg = PointStamped()
        msg.header.stamp = self.get_cloc
        pass




def main():
    rclpy.init()
    node = TesterNode("acoustic_sim_test_node")
    rclpy.spin(node)


if __name__ == "__main__":
    main()
