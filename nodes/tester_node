#!/usr/bin/env python3
import rclpy
from rcl_interfaces.msg import (ParameterDescriptor, ParameterType)
from rclpy.node import Node
from nav_msgs.msg import Odometry

import numpy as np
import yaml


class TesterNode(Node):

    def __init__(self, node_name):
        super().__init__(node_name=node_name)

        self.depth_pub = self.create_publisher(DepthStamped,
                                               'depth',
                                               qos_profile=1)

        self.pressure_sub = self.create_subscription(Odometry,
                                                     'pressure',
                                                     self.on_pressure,
                                                     qos_profile=1)

        self.predict_timer = self.create_timer(timer_period_sec=(1 / 30),
                                               callback=self.predict)
        # self.send_depth_timer = self.create_timer(timer_period_sec=(1 / 30),
        #                                           callback=self.send_depth)

    def on_odometry(self, msg: Odometry):
        

    def send_measurements(self):
        msg = DepthStamped()
        msg.header.stamp = self.get_clock().now().to_msg()
        msg.header.frame_id = 'map'
        msg.depth = self.ekf.get_x_est()[0, 0]
        msg.z_vel = self.ekf.get_x_est()[1, 0]
        msg.depth_covariance = self.ekf.get_p_mat()[0, 0]
        msg.vel_covariance = self.ekf.get_p_mat()[1, 1]
        self.depth_pub.publish(msg)


def main():
    rclpy.init()
    node = TesterNode("acoustic_sim_test_node")
    rclpy.spin(node)


if __name__ == "__main__":
    main()
